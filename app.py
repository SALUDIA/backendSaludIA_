from src.api import app
from config.loader import get_config_instance, get_db_config
import os
import logging

# Configurar logging para producci√≥n
if os.getenv('FLASK_ENV') == 'production':
    logging.basicConfig(level=logging.INFO)
    app.logger.setLevel(logging.INFO)

if __name__ == '__main__':
    try:
        # üöÄ CONFIGURACI√ìN OPTIMIZADA PARA RENDER
        port = int(os.environ.get('PORT', 5000))
        environment = os.environ.get('FLASK_ENV', 'production')
        is_production = environment == 'production'
        
        print("üöÄ SaludIA Backend - Iniciando en Render...")
        print(f"üîß Entorno: {environment}")
        print(f"üåê Puerto: {port}")
        
        # Verificar configuraci√≥n de BD
        try:
            db_config = get_db_config()
            db_host = db_config.get('host', 'unknown')
            if 'aivencloud.com' in db_host:
                print("‚úÖ Base de datos: Aiven MySQL conectada")
            else:
                print(f"‚ö†Ô∏è Base de datos: {db_host}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error verificando BD: {e}")
        
        print("üìã API Endpoints disponibles:")
        print("   POST /predict-friendly - Diagn√≥stico amigable")
        print("   POST /predict - Diagn√≥stico t√©cnico")
        print("   POST /predict-v9 - S√≠ntomas binarios")
        print("   GET /health - Estado del sistema")
        print("="*50)
        
        # Configuraci√≥n espec√≠fica para Render
        app.run(
            debug=False,  # ‚Üê Siempre False en producci√≥n
            host='0.0.0.0',  # ‚Üê Permite conexiones externas
            port=port,
            threaded=True,
            use_reloader=False  # ‚Üê Evita problemas en Render
        )
        
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
        exit(1)